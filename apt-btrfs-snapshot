#!/usr/bin/python
# Copyright (C) 2011 Canonical
#
# Author:
#  Michael Vogt
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA


import argparse
import datetime
import logging
import os
import sys

import gettext
from gettext import gettext as _

from apt_btrfs_snapshot import (
    AptBtrfsSnapshot, 
    supported,
)


class ReportCalls(object):
    def make_skeleton(self, attr):
        def skeleton(*args, **kwargs):
            print("Called %s with args %s and kwargs %s" % (attr,  args, kwargs))
        return skeleton
    
    def __getattr__(self, attr):
        return self.make_skeleton(attr)
        

def _parse_older_than_to_datetime(self, timefmt):
    now = datetime.datetime.now()
    if not timefmt.endswith("d"):
        raise Exception("Please specify time in days (e.g. 10d)")
    days = int(timefmt[:-1])
    return now - datetime.timedelta(days)


if __name__ == "__main__":

    gettext.bindtextdomain("apt-btrfs-snapshot")

    # command line parser
    description = _("Filesystem snapshot support for apt")
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument("--debug", action="store_true", default=False,
                        help="enable debug output")
    parser.add_argument("--test", action="store_true", default=False,
                        help="just shows python call with arguments")
    subparser = parser.add_subparsers(title="Commands")
    # supported
    command = subparser.add_parser(
        "supported", help=_("Print if snapshots are supported"))
    command.set_defaults(command="supported")
    # list
    command = subparser.add_parser(
        "list", help=_("List the last n snapshots, default=10"))
    command.add_argument("how_many", nargs='?', default=10, type=int)
    command.set_defaults(command="list")
    # status
    command = subparser.add_parser(
        "status", help=_("Get current state"))
    command.set_defaults(command="status")
    # create
    command = subparser.add_parser(
        "create", help=_("Create a new snapshot"))
    command.add_argument("tag", nargs='?', default="")
    command.set_defaults(command="create")
    # tag
    command = subparser.add_parser(
        "tag", help=_("Set/change the tag of a snapshot"))
    command.add_argument("snapshot")
    command.add_argument("tag")
    command.set_defaults(command="tag")
    # set-default
    command = subparser.add_parser(
        "set-default", help=_("Revert to snapshot of your choice"))
    command.add_argument("snapshot")
    command.add_argument("tag", nargs='?', default="")
    command.set_defaults(command="set-default")
    # rollback
    command = subparser.add_parser(
        "rollback", help=_("Rollback n snapshots, default=1"))
    command.add_argument("how_many", nargs='?', default=1, type=int)
    command.add_argument("tag", nargs='?', default="", type=str)
    command.set_defaults(command="rollback")
    # delete
    command = subparser.add_parser(
        "delete", help=_("Delete snapshot"))
    command.add_argument("snapshot")
    command.set_defaults(command="delete")
    # list-older-than
    command = subparser.add_parser(
        "list-older-than", help=_("Show snapshots older than N days"))
    command.add_argument("time")
    command.set_defaults(command="list-older-than")
    # delete-older-than
    command = subparser.add_parser(
        "delete-older-than", help=_("Delete snapshots older than N days"))
    command.add_argument("time")
    command.set_defaults(command="delete-older-than")

    # parse args
    args = parser.parse_args()

    # global options
    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    if args.command == "supported":
        res = supported()
        if res:
            print(_("Supported"))
            sys.exit(0)
        else:
            print(_("Not supported"))
            sys.exit(1)

    if os.getuid() != 0:
        print(_("Sorry, you need to be root to run this program"))
        sys.exit(1)

    if not supported():
        print(_("Sorry, your system lacks support for the snapshot feature"))
        sys.exit(1)

    if args.test:
        apt_btrfs = ReportCalls()
    else:
        apt_btrfs = AptBtrfsSnapshot()
    
    res = False
    if args.command == "create":
        res = apt_btrfs.create(args.tag)
    elif args.command == "tag":
        res = apt_btrfs.tag(args.snapshot, args.tag)
    elif args.command == "list":
        res = apt_btrfs.list(args.how_many)
    elif args.command == "status":
        res = apt_btrfs.status()
    elif args.command == "set-default":
        res = apt_btrfs.set_default(args.snapshot, args.tag)
    elif args.command == "rollback":
        res = apt_btrfs.rollback(args.how_many, args.tag)
    elif args.command == "delete":
        res = apt_btrfs.delete(args.snapshot)
    elif args.command == "list-older-than":
        time = _parse_older_than_to_datetime(args.time)
        res = apt_btrfs.list_older_than(time)
    elif args.command == "delete-older-than":
        time = _parse_older_than_to_datetime(args.time)
        res = apt_btrfs.delete_older_than(time)
    else:
        print(_("ERROR: Unhandled command: '%s'") % args.command)

    # return the right exit code
    if res:
        sys.exit(0)
    else:
        sys.exit(1)




