"""
tree can show just a few of the latest.
tree can show everything
tree can show structure - includes only snapshots with no children, no parent, or multiple children

Normal function #2
1. find childless snapshots in reverse age order (youngest first) = column order
2. Parse that list. find youngest parent of all of those
3. Print youngest parent after printing all childless snapshots younger than it
4. Replace youngest parent's child by youngest parent and repeat.

Problem: branches overlap.
Solution
1. Find childless snapshots in reverse age order.
2. Recursively print parents up to and not including one that has several children
3. Go to next childless snapshot
4. Do step 2 for it too.
5. If children quota for the one with several children is reached, print it
6. Do step 2 for it too.
7. etc.

Problem: what happens with disconnected branches?
"""

def _print_up_to_junction(self, snapshot, column):
    """ walks up the snapshot tree until the next one has more than one 
        child, pretty printing each one
    """
    while true:
        print("|--" * column + str(snapshot))
        next = snapshot.parent
        if len(snapshot.children) > 1 or snapshot == None:
            return snapshot
        else:
            # spacer line
            print("|  " * (column + 1)
    
def tree(self):
    to_print = [s for s in snapshots.get_list() if s not in children.keys()]
    to_print.sort(key = youngest_last)
    column = 0
    junctions = {}
    while true:
        snapshot = to_print.pop()
        junction = self._print_up_to_junction(snapshot, column)
        if junction in junctions.keys():
            junctions[junction] -= 1
            if junctions[junction] == 0:
                to_print.append(junction)
                print("branch junction join-up lines")
                column = column - len(self.children[junction])
            else:
                junctions[junction] = len(self.children[junction]) - 1
        column += 1
